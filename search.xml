<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker安装及基本使用</title>
    <url>/2019/07/05/Docker%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Docker安装及使用"><a href="#Docker安装及使用" class="headerlink" title="Docker安装及使用"></a>Docker安装及使用</h1><p>学习Docker作为技术储备，说不定哪天就用上了呢，再说了还可以看看新技术，岂不美哉。</p>
<p>本教程使用CentOS，Ubuntu安装只是少许命令不一样，不影响结果，系统内核版本Linux3.10及以上即可。</p>
<p>实战环境：</p>
<blockquote>
<p>OS：CentOS7.5.1804</p>
<p>Docker：18.06.1-ce</p>
<p>JDK：1.8.0_181</p>
<p>Tomcat：8.0.53</p>
</blockquote>
<span id="more"></span>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><blockquote>
<p>从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。</p>
<p>Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</p>
<p>本文介绍 Docker CE 的安装使用。</p>
</blockquote>
<h3 id="移除旧版本"><a href="#移除旧版本" class="headerlink" title="移除旧版本"></a>移除旧版本</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><h4 id="安装所需要的包"><a href="#安装所需要的包" class="headerlink" title="安装所需要的包"></a>安装所需要的包</h4><p><code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install -y yum-utils device-mapper-persistent-data lvm2</span></span><br></pre></td></tr></table></figure>

<h4 id="设置稳定存储库"><a href="#设置稳定存储库" class="headerlink" title="设置稳定存储库"></a>设置稳定存储库</h4><p>即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储库。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum-config-manager --add-repo https:<span class="comment">//download.docker.com/linux/centos/docker-ce.repo</span></span></span><br></pre></td></tr></table></figure>

<h4 id="安装Docker-CE-1"><a href="#安装Docker-CE-1" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install docker-ce</span></span><br></pre></td></tr></table></figure>

<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl start docker</span></span><br></pre></td></tr></table></figure>

<h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># systemctl enable docker</span></span><br></pre></td></tr></table></figure>

<h3 id="测试运行hello-world"><a href="#测试运行hello-world" class="headerlink" title="测试运行hello-world"></a>测试运行hello-world</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker run hello-world</span></span><br></pre></td></tr></table></figure>

<p>由于本地没有hello-world这个镜像，所以会下载一个hello-world镜像再容器里运行</p>
<h2 id="制作Tomcat8镜像"><a href="#制作Tomcat8镜像" class="headerlink" title="制作Tomcat8镜像"></a>制作Tomcat8镜像</h2><h3 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h3><blockquote>
<p>制作镜像需要一个基础镜像，由于我的系统是CentOS，故拉取一个CentOS的基础镜像。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker pull centos:7.5.1804</span><br></pre></td></tr></table></figure>

<p>下载完了可以查看镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker images</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="准备Jdk和Tomcat"><a href="#准备Jdk和Tomcat" class="headerlink" title="准备Jdk和Tomcat"></a>准备Jdk和Tomcat</h3><p>下载适用于CentOS的Jdk和Tomcat版本，上传至服务器，新建一个tomcat的文件夹，将jdk和tomcat解压后移动到tomcat文件夹。</p>
<h3 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建Dockerfile文件</h3><p>在tomcat文件夹中新建一个Dockerfile文件，可以用touch或者直接使用vim命令。</p>
<p>Dockerfile的文件内容如下：</p>
<blockquote>
<p>第一行的FROM后面有串字符，是CentOS基础镜像的ID。</p>
<p>第三行这个环境变量用来表名该镜像模板的最后更新时间。</p>
<p>注意：这里的创建目录和设置环境变量都不是在容器外面，不会影响到外面，比如这里的Java环境变量不会影响外面真正的Java使用。等容器制作好了，可以用命令进入容器查看这些目录和文件。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM 76d6bc25b8a5</span><br><span class="line">MAINTAINER lsm</span><br><span class="line">ENV REFRESHED_AT 2018-10-11</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换镜像目录，进入/usr目录</span></span><br><span class="line">WORKDIR /usr</span><br><span class="line"><span class="comment"># 创建jdk和tomcat两个目录</span></span><br><span class="line">RUN mkdir jdk</span><br><span class="line">RUN mkdir tomcat</span><br><span class="line"><span class="comment"># 将jdk和tomcat复制到/usr中</span></span><br><span class="line">ADD jdk1.8.0_181 /usr/jdk</span><br><span class="line">ADD apache-tomcat-8.0.53 /usr/tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME=/usr/jdk</span><br><span class="line">ENV JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">ENV CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line">ENV PATH=/sbin:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#公开端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动命令</span></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;/usr/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="制作Tomcat镜像"><a href="#制作Tomcat镜像" class="headerlink" title="制作Tomcat镜像"></a>制作Tomcat镜像</h3><p>切换目录至tomcat，然后执行build命令。</p>
<blockquote>
<p>如果不是root用户，需要在镜像名字前面加用户名，例如<code>docker build -t datein/tomcat:8.0</code>，8.0是版本号。</p>
<p>切记，最后有一个英文点号，空格加英文点号！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cd</span><br><span class="line"># cd tomcat/</span><br><span class="line"># docker build -t tomcat:8.0 .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>制作需要一段时间，如果控制台没有反应，请耐心等待。制作完成后，可以使用<code>docker images</code>来查看。</p>
<h2 id="启动Docker容器"><a href="#启动Docker容器" class="headerlink" title="启动Docker容器"></a>启动Docker容器</h2><p>通过制作好的镜像，启动一个容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker run -d -p 8080:8080 --name lsm_tomcat tomcat:8.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果不是root用户，需要在tomcat:8.0前加用户路径，例如datein/tomcat:8.0。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-d: 后台运行容器，并返回容器ID</span><br><span class="line">-p: 端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">--name: 为容器指定一个名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动容器后，可以在本机的浏览器查看效果。</p>
<h2 id="停止Docker容器"><a href="#停止Docker容器" class="headerlink" title="停止Docker容器"></a>停止Docker容器</h2><p>启动容器后，命令行会返回一串代码，使用如下命令可以停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker stop 47ced680f69026ca9be9fb93f46ff314dc7170c4faab2d24e4cd985e28af550a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>停止容器后，以后再想启动这个tomcat容器，只需要使用<code>docker start lsm_tomcat</code>或者<code>docker stop lsm_tomcat </code>就行了，不需要再输入那一大长串的字符。lsm_tomcat替换成自己镜像的名字。</p>
<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><p>我们可以进入容器看看通过Dockerfile创建的镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker exec -it lsm_tomcat /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到目录结构和主机/usr目录结构一模一样。</p>
<h2 id="镜像复用"><a href="#镜像复用" class="headerlink" title="镜像复用"></a>镜像复用</h2><h3 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h3><p>制作的镜像可以上传到docker的公共仓库，也可以上传到自己的私人仓库，由于还不会建私人仓库，故先将tomcat镜像保存为本地文件。格式为tar压缩包。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker save -o tomcat8.tar tomcat:8.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><p>先用ftp工具保存镜像，然后上传到安装了docker的服务器，使用<code>docker load</code>导入镜像文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># docker load &lt; tomcat8.tar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>导入后可以使用<code>docker images</code>查看。</p>
<p>导入成功后，可以直接使用<code>docker run</code>来启动镜像，秒起，这就是docker的魅力之一吧，只要一台服务器的环境配好了，其他的复制下就可以使用了，而且启动速度很快。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK安装及环境变量配置</title>
    <url>/2019/07/16/JDK%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Windows10安装配置JDK8"><a href="#Windows10安装配置JDK8" class="headerlink" title="Windows10安装配置JDK8"></a>Windows10安装配置JDK8</h2><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><ul>
<li><p>直接在java官网下载<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
</li>
<li><p>选择下载jdk</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/1.png" alt="image"></p>
<span id="more"></span>

<ul>
<li>点击Accept,然后选择对应的版本，windows系统选择Windows X86(32位)或X64(64位)。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/2.png" alt="image"></p>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><blockquote>
<p>jdk和jre安装目录是并列的并且在同一个目录下</p>
</blockquote>
<ul>
<li>双击安装包，选择下一步，然后在如图所示地方，选择jdk安装目录</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/3.png" alt="image"></p>
<ul>
<li>然后在安装jre的时候选择jre的安装目录</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/4.png" alt="image"></p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>依次打开此电脑-右键-属性-高级系统设置-环境变量</p>
<ul>
<li>新建环境变量JAVA_HOME，变量值为jdk路径。例如：C:\java\jdk1.8.0_131</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/5.png" alt="image"></p>
<ul>
<li>新建CLASSPATH变量，变量值为” .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar “（注意前面有一个点号和分号）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/6.png" alt="image"></p>
<ul>
<li>编辑Path变量，加入”C:\java\jdk1.8.0_131\bin” 和 “C:\java\jdk1.8.0_131\jre\bin”</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/7.png" alt="image"></p>
<h3 id="验证JDK是否安装成功"><a href="#验证JDK是否安装成功" class="headerlink" title="验证JDK是否安装成功"></a>验证JDK是否安装成功</h3><ul>
<li>输入java -version出现版本信息</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/8.png" alt="image"></p>
<ul>
<li>输入java，出现java命令用法</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/9.png" alt="image"></p>
<ul>
<li>输入javac，出现javac命令用法</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/10.png" alt="image"></p>
<p>出现上述显示内容即可证明环境配置成功。</p>
<h2 id="Linux安装JDK8"><a href="#Linux安装JDK8" class="headerlink" title="Linux安装JDK8"></a>Linux安装JDK8</h2><blockquote>
<p>本教程采用Ubuntu16.04LTS，其他发行版本基本一样，只是少部分命令有点差别。</p>
</blockquote>
<h3 id="下载JDK-1"><a href="#下载JDK-1" class="headerlink" title="下载JDK"></a>下载JDK</h3><ul>
<li><p>直接在java官网下载<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
</li>
<li><p>选择下载jdk</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/1.png" alt="image"></p>
<ul>
<li>点击Accept,然后选择对应的版本，Ubuntu选择Linux X86(32位)或X64(64位)。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Windows/2.png" alt="image"></p>
<h3 id="解压JDK"><a href="#解压JDK" class="headerlink" title="解压JDK"></a>解压JDK</h3><ul>
<li>将终端切换到jdk文件目录，使用tar命令解压文件：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u112-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>使用mv命令将文件剪切到目标目录，可以顺便换一个名字。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv jdk1.8.0_112/ /usr/local/java</span><br></pre></td></tr></table></figure>

<h3 id="配置环境变量-1"><a href="#配置环境变量-1" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul>
<li>在终端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>这个命令只能修改当前用户的环境变量，也可以在root模式下使用该命令即修改root的环境变量。</p>
<ul>
<li>如需修改所有用户的环境变量，可以输入如下命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<ul>
<li>在文件最后面加入如下代码，根据自己加压路劲不同适当修改代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java</span><br><span class="line">export JRE_HOME=/usr/local/java/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:/usr/local/java/lib:/usr/local/java/jre/lib</span><br><span class="line">export PATH=$PATH:/usr/local/java/bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在终端输入以下命令可以让环境变量，根据自己修改不同文件来选择执行哪条命令。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br><span class="line">或</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="验证JDK是否安装成功-1"><a href="#验证JDK是否安装成功-1" class="headerlink" title="验证JDK是否安装成功"></a>验证JDK是否安装成功</h3><ul>
<li>输入以下命令查看版本信息。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Java/JDK/Linux/1.png" alt="image"></p>
<ul>
<li>输入java和javac，看是否出现命令用法，类似于上面windows的验证方法。</li>
</ul>
<p>如出现以上内容，即证明jdk安装成功</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>ORA-01109 Oracle initialization or shutdown in progress</title>
    <url>/2019/07/16/ORA-01109-Oracle-initialization-or-shutdown-in-progress/</url>
    <content><![CDATA[<h2 id="产生错误原因"><a href="#产生错误原因" class="headerlink" title="产生错误原因"></a>产生错误原因</h2><p>今天建立表空间之后，发现表空间大小没有设置自动增长，于是想删掉重建，遂直接去Oracle目录删掉DBF文件，有个别文件不允许删除，还自作聪明的停掉Oracle服务再删。刚开始接触Oracle，并不清楚带来的后果，删掉后启动Oracle相关服务，打开PL/SQL Developer，连接数据库的时候提示“ORA-01109:Oracle initialization or shutdown in progress”。解决办法如下：</p>
<!--  more  -->

<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><ol>
<li><p>打开cmd</p>
</li>
<li><p>输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Oracle/ORA-01109/1.png" alt="image"></p>
<blockquote>
<p>运行sqlplus命令，进入sqlplus环境，nolog参数表示不登录</p>
</blockquote>
</li>
<li><p>输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect  sys/sys as sysdba;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Oracle/ORA-01109/2.png" alt="image"></p>
<blockquote>
<p>以系统管理员（sysdba）身份连接数据库</p>
</blockquote>
</li>
<li><p>输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup mount;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Oracle/ORA-01109/3.png" alt="image"></p>
</li>
<li><p>输入以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database open;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Oracle/ORA-01109/4.png" alt="image"></p>
</li>
<li><p>仔细查看错误提示，我的提示数据文件9无法锁定，本地已经没有了，但是数据库还以为存在，所以会提示找不到就不能启动Oracle，需要再Oracle中删掉这个文件，不让Oracle去加载。输入如下命令，命令要根据自己的提示改变数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database datafile 9 offline drop;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/Oracle/ORA-01109/5.png" alt="image"></p>
</li>
<li><p>重复进行第五步和第六步，直到输入alter database open的时候提示数据库已更改如上图所示。</p>
</li>
<li><p>关闭数据库例程再装在打开数据库，依次输入如下两个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown normal</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">startup</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>操作数据库中遇到问题不要盲目的想当然就去处理了，要查阅相关资料，确认无误后操作，毕竟数据无价。。。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORACLE</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware配置Ubuntu Host-Only上网</title>
    <url>/2019/07/16/VMware%E9%85%8D%E7%BD%AEUbuntu-Host-Only%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<h2 id="VMware配置Ubuntu-Host-Only上网"><a href="#VMware配置Ubuntu-Host-Only上网" class="headerlink" title="VMware配置Ubuntu Host-Only上网"></a>VMware配置Ubuntu Host-Only上网</h2><ol>
<li><p>打开网络适配器，选择WLAN或者以太网，右键-&gt;属性-&gt;共享-&gt;打勾并选择共享给VMNet1.</p>
</li>
<li><p>VMWare-&gt;编辑-&gt;虚拟网络编辑器-&gt;选择Host-Only，然后更改子网IP为自己设置的IP，最后一位是0.其实表示的是一个网段。例如（192.168.88.0）.</p>
</li>
<li><p>安装虚拟机选择Host-Only模式。</p>
<span id="more"></span></li>
<li><p>修改VMNete1的IP，例如（192.168.88.1）子网掩码（255.255.255.0）</p>
</li>
<li><p>编辑Ubuntu网卡配置文件。</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>添加以下内容,网关和DNS都指向VMNet1的IP地址<br>auto后面的网卡名字随系统自行更改<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet static</span><br><span class="line">address 192.168.88.88   </span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.88.1</span><br><span class="line">dns-nameserver 192.168.88.1</span><br></pre></td></tr></table></figure></li>
<li>重启网络服务(如有必要可重启Ubuntu)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建博客系统</title>
    <url>/2017/09/07/GitHub-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直想拥有一个属于自己的博客，但是国内的总感觉差了点什么，偶然间了解到GitHub上也可以搭建博客，就决定试试，毕竟这是全球最大的同性交友平台（滑稽脸）</p>
<p>本机环境如下：</p>
<blockquote>
<p>系统：    Windows10</p>
<p>Git:      Git-2.24.0-64-bit</p>
<p>Node.js:  node-v12.14.1-x64</p>
</blockquote>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><ul>
<li> 在官网下载Node.js安装文件</li>
</ul>
<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<ul>
<li>安装Node.js，默认配置就行。安装完毕打开命令提示符窗口，依次输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果出现下图所示，则说明已经正确安装，如果不正确请卸载重装并检查自己哪里出错了</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/1.png" alt="image"></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul>
<li>在Git官网下载最新的Git并安装</li>
</ul>
<p> <a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p> <img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/2.png" alt="image"></p>
<p> 和Node.js一样，大部分设置都只需要保持默认，但是出于我们操作方便考虑，建议PATH选项按照下图选择</p>
<p> <img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/3.png" alt="image"></p>
<ul>
<li>查看是否安装成功</li>
</ul>
<p> <img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/4.png" alt="image"></p>
<h2 id="GitHub账号的注册和配置"><a href="#GitHub账号的注册和配置" class="headerlink" title="GitHub账号的注册和配置"></a>GitHub账号的注册和配置</h2><h3 id="GitHub注册"><a href="#GitHub注册" class="headerlink" title="GitHub注册"></a>GitHub注册</h3><ul>
<li>注册GitHub：打开GitHub官网在注册页面填写用户名，邮箱，密码。然后前往自己刚才填写的邮箱，点开GitHub发送的注册确认信，结束注册流程。</li>
</ul>
<h3 id="GitHub创建代码仓库并配置"><a href="#GitHub创建代码仓库并配置" class="headerlink" title="GitHub创建代码仓库并配置"></a>GitHub创建代码仓库并配置</h3><ul>
<li>创建代码库：登陆之后点击页面右上角的加号，选择New repository</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/5.png" alt="image"></p>
<ul>
<li>新建代码库：进入代码库创建页面，在Repository name下填写</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yourname.github.io</span><br></pre></td></tr></table></figure>
<p>yourname必须和Owner相同，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/6.png" alt="image"></p>
<ul>
<li>代码库设置：正确创建后，你将看到如下界面：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/7.png" alt="image"></p>
<p>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/8.png" alt="image"></p>
<ul>
<li>点击Choose a theme，然后选择一个喜欢的主题</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/9.png" alt="image"></p>
<ul>
<li>选择主题之后再代码仓库界面点击commit changs.就可以访问<a href="https://leeshimian.githun.io/">https://leeshimian.githun.io</a></li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/10.png" alt="image"></p>
<h2 id="安装Hexo并配置"><a href="#安装Hexo并配置" class="headerlink" title="安装Hexo并配置"></a>安装Hexo并配置</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul>
<li>在自己认为合适的地方创建一个文件夹，这里我以F:\GitHub\hexo为例。在命令行窗口进入该目录</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/11.png" alt="image"></p>
<p>在命令行中输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>然后你将会看到：</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/12.png" alt="image"></p>
<p>可能你会看到警告，但是这并不会影响你使用。</p>
<p>接下来我们来看一看Hexo是不是已经安装好了。 在命令行中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果你看到如下图所示文字，则说明已经安装成功了！</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/13.png" alt="image"></p>
<h3 id="Hexo相关配置"><a href="#Hexo相关配置" class="headerlink" title="Hexo相关配置"></a>Hexo相关配置</h3><ul>
<li>初始化Hexo</li>
</ul>
<p>接着上面的操作，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>之后npm将会自动安装你需要的组件，只需要等待npm操作即可。</p>
<ul>
<li>首次体验Hexo</li>
</ul>
<p>继续操作，同样是在命令行中，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g  # 等同于hexo generate，生成静态文件到public文件夹</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/14.png" alt="image"></p>
<p>然后输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s  # 等同于hexo server，在本地服务器运行</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/15.png" alt="image"></p>
<p>在浏览器中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>
<p>你将会看到：</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/16.png" alt="image"></p>
<p>到目前为止，Hexo在本地的配置已经全部结束。</p>
<h2 id="怎样将Hexo与github-page-联系起来"><a href="#怎样将Hexo与github-page-联系起来" class="headerlink" title="怎样将Hexo与github page 联系起来"></a>怎样将Hexo与github page 联系起来</h2><h3 id="SSH设置"><a href="#SSH设置" class="headerlink" title="SSH设置"></a>SSH设置</h3><ul>
<li>设置Git的user name和email：(如果是第一次的话)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;leeshimian&quot;</span><br><span class="line">git config --global user.email &quot;leeshimian@gmail.com&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成SSH(此后步骤在Git Bash下执行，其实所有步骤都最好用Git Bash)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;leeshimian@gmail.com&quot;</span><br></pre></td></tr></table></figure>
<p>出现如下所示，提示输入的地方一路回车</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/17.png" alt="image"></p>
<p>然后依次输入下面两个命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure>
<ul>
<li>在代码仓库页面点击Settings，然后点击左侧Deploy Keys。如图所示</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/18.png" alt="image"></p>
<ul>
<li><p>然后点击右侧add deploy key。</p>
</li>
<li><p>在C:\Users\datei\.ssh找到密钥文件（datei是我的用户名，各位需要改成自己电脑的用户名）</p>
</li>
<li><p>用记事本打开id_rsa.pub，然后复制内容到GitHub的页面，如图所示，title自己随便想一个</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/19.png" alt="image"></p>
<ul>
<li>最后允许连接，输入以下命令：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/20.png" alt="image"></p>
<p>提示输入(yes/no)的时候输入yes回车即可。</p>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><ul>
<li>在/hexo/_config.yml文件中，找到Deployment，然后按照如下修改：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:leeshimian/leeshimian.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>leeshimian替换成自己的用户名</p>
<ul>
<li>注意需要安装一个扩展：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>如果没有执行者行命令，将会提醒</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deloyer not found:git</span><br></pre></td></tr></table></figure>
<p>如果出现下面这样的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Permission denied (publickey).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>
<p>则是因为没有设置好public key所致。</p>
<h3 id="验证Hexo是否可以在GitHub上部署成功"><a href="#验证Hexo是否可以在GitHub上部署成功" class="headerlink" title="验证Hexo是否可以在GitHub上部署成功"></a>验证Hexo是否可以在GitHub上部署成功</h3><ul>
<li>输入以下命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g #在部署前先生成</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/21.png" alt="image"></p>
<ul>
<li>打开网页查看是否可以正常访问。<a href="https://leeshimian.github.io/">https://leeshimian.github.io</a></li>
</ul>
<h2 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>在hexo目录下输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件_config.yml， 找到 theme 字段，并将其值更改为 next。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>然后是正常的部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h2 id="个性化Next"><a href="#个性化Next" class="headerlink" title="个性化Next"></a>个性化Next</h2><blockquote>
<p>模仿阿里中间件团队的博客（<a href="http://jm.taobao.org/%EF%BC%89">http://jm.taobao.org/）</a></p>
</blockquote>
<blockquote>
<p>以下将hexo根目录下的配置文件_config.yml称为站点配置文件</p>
</blockquote>
<blockquote>
<p>将hexo\themes\next下的配置文件_config.yml称为主题配置文件</p>
</blockquote>
<h3 id="修改标题和小标题，作者，语言，个性签名。"><a href="#修改标题和小标题，作者，语言，个性签名。" class="headerlink" title="修改标题和小标题，作者，语言，个性签名。"></a>修改标题和小标题，作者，语言，个性签名。</h3><p>打开站点配置文件，找到#site并修改相应内容</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/22.png" alt="image"></p>
<h3 id="改变菜单栏"><a href="#改变菜单栏" class="headerlink" title="改变菜单栏"></a>改变菜单栏</h3><ul>
<li><p>在主题配置文件中修改menu字段，如下所示，可以根据自己的喜好来设置。</p>
<blockquote>
<p>新版不知为何需要将中间默认的空格删掉，否则标签无效；老版不需要删除。</p>
</blockquote>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">home</span>: <span class="string">/||home</span></span><br><span class="line">  <span class="attr">archives</span>: <span class="string">/archives/||archive</span></span><br><span class="line">  <span class="attr">categories</span>: <span class="string">/categories/||th</span></span><br><span class="line">  <span class="attr">tags</span>: <span class="string">/tags/||tags</span></span><br><span class="line">  <span class="attr">about</span>: <span class="string">/about/||user</span></span><br><span class="line"><span class="comment">  #schedule: /schedule/ || calendar</span></span><br><span class="line"><span class="comment">  #sitemap: /sitemap.xml || sitemap</span></span><br><span class="line"><span class="comment">  #commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>


<ul>
<li>在Git Bash中依次执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<ul>
<li>在本地测试效果，今后的测试先在本地测试好，再上传到github，测试方法一样。测试好后用下面命令部署</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h3 id="添加头像。"><a href="#添加头像。" class="headerlink" title="添加头像。"></a>添加头像。</h3><p>在hexo/source/下创建文件夹/images，放入一张图片。然后修改主题配置文件，将avatar修改如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avatar: /images/1.jpg</span><br></pre></td></tr></table></figure>

<h3 id="设置头像为圆形"><a href="#设置头像为圆形" class="headerlink" title="设置头像为圆形"></a>设置头像为圆形</h3><p>打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在.site-author-image添加头像圆形注释下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  /*头像圆形*/</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><ul>
<li>在Git Bash中，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>
<ul>
<li>在hexo/source下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件,编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。页面内容如下：：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/24.png" alt="image"></p>
<p>以后要为文章添加标签只需要在文章前面添加”tags:[]”就可以了，具体演示等设置完分类再演示。</p>
<h3 id="添加分类页面"><a href="#添加分类页面" class="headerlink" title="添加分类页面"></a>添加分类页面</h3><ul>
<li>在Git Bash中，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories ：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<ul>
<li>在hexo/source下会新生成一个新的文件夹categories，在该文件夹下会有一个index.md文件,编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/25.png" alt="image"></p>
<h3 id="添加关于我页面"><a href="#添加关于我页面" class="headerlink" title="添加关于我页面"></a>添加关于我页面</h3><p>在Git Bash中，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 about ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>
<p>在hexo/source下会新生成一个新的文件夹about，在该文件夹下会有一个index.md文件,编辑刚新建的页面。</p>
<h3 id="设置侧边栏链接"><a href="#设置侧边栏链接" class="headerlink" title="设置侧边栏链接"></a>设置侧边栏链接</h3><p>添加github和email的连接（github连接可以直接进入我们的代码仓库，email连接可以启动邮箱客户端给目标邮箱发送邮件）。修改主题配置文件，找到social和social_icons，将social前面的注释去掉并修改成如下配置，如有需要可自行修改成自己想要的效果</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/26.png" alt="image"></p>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>只需要主题配置文件中填入微信和支付宝收款二维码图片地址，即可开启该功能，注意缩进。图片放在hexo\source\images目录下。</p>
<blockquote>
<p>注意：reward_comment,wechatpay,alipay一定要顶格写，冒号后面有一个空格！</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/27.png" alt="image"></p>
<h3 id="修该打赏字体为不闪动"><a href="#修该打赏字体为不闪动" class="headerlink" title="修该打赏字体为不闪动"></a>修该打赏字体为不闪动</h3><p>修改文件next/source/css/_common/components/post/post-reward.styl，然后注释其中的函数wechat:hover和alipay:hover，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 注释文字闪动函数</span><br><span class="line">#wechat:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">#alipay:hover p&#123;</span><br><span class="line">    animation: roll 0.1s infinite linear;</span><br><span class="line">    -webkit-animation: roll 0.1s infinite linear;</span><br><span class="line">    -moz-animation: roll 0.1s infinite linear;</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>编辑主题配置文件，找到如下所示位置并修改成自己想要的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_title: 友情链接</span><br><span class="line">#links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  OPENRED&#x27;s BLOG: http://www.openred.cn/</span><br></pre></td></tr></table></figure>

<h3 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h3><p>在主题下的source目录下添加404.html，内容如下（我用的是github的二级域名，亲测无效，据说绑定了顶级域名才有效，本人没有实践过，对于是否可行不负责任，各位可自行尝试）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 © 2016 - 2017。 编辑 主题配置文件，新增字段 since。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">since: 2017</span><br></pre></td></tr></table></figure>

<h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><p>在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。在微信公众号平台下载您的二维码，并将它存放于博客source/uploads/目录下。然后编辑 主题配置文件，如下：</p>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/28.png" alt="image"></p>
<p>本人暂时没有公众号，固没有设置。</p>
<h3 id="搜索服务："><a href="#搜索服务：" class="headerlink" title="搜索服务："></a>搜索服务：</h3><blockquote>
<p>这里使用Local Search(可以删掉菜单的搜索，不然菜单有两个搜索图标)。</p>
</blockquote>
<ul>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑站点配置文件新增以下内容到任意位置：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑主题配置文件，启用本地搜索功能：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h3><p>NexT 借助于 MathJax 来显示数学公式，此选项默认关闭。编辑 主题配置文件， 将 mathjax 下的 enable 设定为 true 即可。 cdn 用于指定 MathJax 的脚本地址，默认是 MathJax 官方提供的 CDN 地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>

<h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p>网易云跟帖和多说都不能使用了，这里使用来必力。登陆官网获取UID，编辑主题配置文件，找到  livere_uid: 字段，设置如下：</p>
<blockquote>
<p>注意：livere_uid一定要顶格，冒号后面有一个空格！！！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">livere_uid: *********</span><br></pre></td></tr></table></figure>


<h3 id="如何设置「阅读全文」？"><a href="#如何设置「阅读全文」？" class="headerlink" title="如何设置「阅读全文」？"></a>如何设置「阅读全文」？</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。 NexT提供三种方式来控制文章在首页的显示方式。</p>
<ul>
<li>在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在文章的 front-matter 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在主题配置文件中找到以下内容将enable设置为true：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>默认截取的长度为 150 字符，可以根据需要自行设定。</p>
<blockquote>
<p>建议使用 <!-- more -->（即第一种方式），除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。</p>
</blockquote>
<h3 id="修改标题和阿里中间件一样"><a href="#修改标题和阿里中间件一样" class="headerlink" title="修改标题和阿里中间件一样"></a>修改标题和阿里中间件一样</h3><ul>
<li><p>在hexo\themes\next\source\css\_common\components\header目录下找到site-meta.styl文件。</p>
</li>
<li><p>修改.brand样式</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.brand &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  padding: 0 40px;</span><br><span class="line">  color: $000;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  &amp;:hover &#123; color: #fc9b00; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改.site-title样式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.site-title &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  vertical-align: top;</span><br><span class="line">  line-height: 36px;</span><br><span class="line">  font-size: 30px;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">  font-family: $font-family-logo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改底部"><a href="#修改底部" class="headerlink" title="修改底部"></a>修改底部</h3><ul>
<li>打开\hexo\themes\next\languages\zh-Hans.yml文件,修改footer字段如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  powered: leeshimian@gmail.com</span><br><span class="line">  theme: github.com/leeshimian</span><br></pre></td></tr></table></figure>
<ul>
<li>打开hexo\themes\next\layout\_partials\footer.swig文件，替换为如下代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;copyright&quot; &gt;</span><br><span class="line">  &#123;% set current = date(Date.now(), &quot;YYYY&quot;) %&#125;</span><br><span class="line">  &amp;copy; &#123;% if theme.since and theme.since != current %&#125; &#123;&#123; theme.since &#125;&#125; &amp;mdash; &#123;% endif %&#125;</span><br><span class="line">  &lt;span itemprop=&quot;copyrightYear&quot;&gt;&#123;&#123; current &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;with-love&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;fa fa-&#123;&#123; theme.authoricon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &lt;span class=&quot;author&quot; itemprop=&quot;copyrightHolder&quot;&gt;&#123;&#123; config.author &#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% if theme.post_wordcount.totalcount %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">      &lt;i class=&quot;fa fa-area-chart&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &#123;% if theme.post_wordcount.item_text %&#125;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;post.totalcount&#x27;) &#125;&#125;&amp;#58;&lt;/span&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &lt;span title=&quot;&#123;&#123; __(&#x27;post.totalcount&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">      &#123;&#123; totalcount(site, &#x27;0,0.0a&#x27;) &#125;&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&#x27;) &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &#123;&#123; __(&#x27;footer.theme&#x27;, &#x27;&#x27;)&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>效果如图所示</li>
</ul>
<p><img src="https://raw.githubusercontent.com/leeshimian/images/master/hexo/29.png" alt="image"></p>
<h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><ul>
<li>编辑主题配置文件中的busuanzi_count的配置项。</li>
</ul>
<blockquote>
<p>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示，可以根据自己的需求开启哪几个服务并定制服务。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: false</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: false</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: 热度</span><br><span class="line">  page_pv_footer: ℃</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于不蒜子的域名更换了，所以会找不到JS导致统计失效，故需更换JS路径</p>
</blockquote>
<ul>
<li>将Hexo\themes\next\layout_third-party\analytics\busuanzi-counter.swig文件中的域名更改为:<a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a></li>
</ul>
<h3 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h3><ul>
<li><p>网上找或者自己制作一个32*32的格式为ico的图标，图标名称为：favicon.ico</p>
</li>
<li><p>将图标放在Hexo\themes\next\source\images目录下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">small</span>: <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">medium</span>: <span class="string">/images/favicon.ico</span></span><br><span class="line">  <span class="attr">apple_touch_icon</span>: <span class="string">/favicon.ico</span></span><br><span class="line">  <span class="attr">safari_pinned_tab</span>: <span class="string">/favicon.ico</span></span><br><span class="line"><span class="comment">  #android_manifest: /images/manifest.json</span></span><br><span class="line"><span class="comment">  #ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="设置RSS订阅"><a href="#设置RSS订阅" class="headerlink" title="设置RSS订阅"></a>设置RSS订阅</h3><p>在Git Bash中切换到hexo目录，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>执行完毕后打开站点配置文件，在文件末尾添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure>
<p>然后打开主题配置文件，找到rss字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&#x27;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss:</span><br></pre></td></tr></table></figure>
<p>在rss后面添加/atom.xml。注意冒号后面有一个空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure>

<h3 id="博客效果图"><a href="#博客效果图" class="headerlink" title="博客效果图"></a>博客效果图</h3><p>可以参考我的主页哈哈<br><a href="https://leeshimian.github.io/">https://leeshimian.github.io/</a></p>
<h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><ul>
<li>在Git Bash中切换到hexo目录，输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;GitHub+Hexo搭建博客系统&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>打开这个文件（\hexo\source_posts\），再文件开头加上标签和分类</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: GitHub+Hexo搭建博客系统</span><br><span class="line">date: 2017-09-07 00:22:19</span><br><span class="line">tags: [hexo, github]</span><br><span class="line">category: 搭建博客</span><br></pre></td></tr></table></figure>
<p>再写上内容，重新生成部署即可！部署前需要hexo clean</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><blockquote>
<p>感谢大神们的分享，感谢为开源世界做出贡献的程序员。</p>
</blockquote>
<p>参考文章：</p>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
<p><a href="https://segmentfault.com/a/1190000009544924#articleHeader31">https://segmentfault.com/a/1190000009544924#articleHeader31</a></p>
<p><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018">http://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
